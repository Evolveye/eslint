//
// TODO rule for spacing after variable creation
// TODO remove space before/after default param value
//

module.exports = {
  env: {
    es2021: true,
    node: true,
    browser: true,
  },
  extends: [ `eslint:recommended` ],
  parser: `@typescript-eslint/parser`,
  plugins: [
    `react`,
    `import`,
    `spaces`,
    `@typescript-eslint`,
  ],
  parserOptions: {
    ecmaVersion: 12,
    sourceType: `module`,
    babelOptions: {
      configFile: `${__dirname}/.babelrc`,
    },
    ecmaFeatures: {
      jsx: true,
      modules: true,
    },
  },
  rules: {
    "@typescript-eslint/explicit-module-boundary-types": [ `off` ],
    "@typescript-eslint/no-non-null-assertion": [ `off` ],
    "@typescript-eslint/no-unused-vars": [ `warn` ],
    "@typescript-eslint/type-annotation-spacing": [ `error`, { before:false, after:true, overrides:{ arrow:{ before:true, after:true }, parameter:{ before:false, after:false } } } ],
    "@typescript-eslint/no-redeclare": [ `off` ],
    "@typescript-eslint/member-delimiter-style": [ `error`, { multiline:{ delimiter:`none`, requireLast:true }, singleline:{ delimiter:`semi`, requireLast:false } } ],
    "@typescript-eslint/method-signature-style": [ `error`, `property` ],
    // "@typescript-eslint/naming-convention": [ `error`, ],
    "@typescript-eslint/no-explicit-any": [ `error`, { fixToUnknown:true, ignoreRestArgs:false } ],
    "@typescript-eslint/no-extra-non-null-assertion": [ `error` ],
    '@typescript-eslint/indent': [ `error`, 2, { SwitchCase:1 } ],
    // '@typescript-eslint/no-for-in-array': [ `error` ],
    "@typescript-eslint/quotes": [ `error`, `backtick` ],

    "spaces/space-in-arrow-functions-parens": [ `error`, `never` ],
    "spaces/space-in-functions-parens": [ `error`, `always` ],
    "spaces/space-in-constructors": [ `error`, `always` ],
    "spaces/space-in-calls": [ `error`, `always` ],
    "spaces/space-in-loops-and-ifs": [ `error`, `never` ],
    "spaces/double-spaces-in-for": [ `error` ],

    "react/jsx-indent": [ `error`, 2 ],
    "react/jsx-uses-vars": [ `error` ],
    "react/jsx-uses-react": [ `error` ],
    "react/jsx-closing-bracket-location": [ `error`, `line-aligned` ],
    "react/jsx-curly-brace-presence": [ `error`, { props:`never`, children:`never` } ],
    "react/jsx-curly-newline": [ `error`, { multiline:`require`, singleline:`forbid` } ],
    "react/jsx-curly-spacing": [ `error`, { when:`never`, children:true } ],
    "react/jsx-first-prop-new-line": [ `error`, `multiline-multiprop` ],
    "react/jsx-fragments": [ `error`, `syntax` ],
    "react/jsx-no-useless-fragment": [ `error` ],
    // "react/jsx-max-props-per-line": [ `error`, { maximum:2, when:`always` } ],
    "react/jsx-no-target-blank": [ `error`, { enforceDynamicLinks:`always` } ],
    "react/jsx-props-no-multi-spaces": [ `error` ],
    "react/jsx-tag-spacing": [ `error`, { closingSlash:`never`, beforeSelfClosing:`always`, afterOpening:`never`, beforeClosing:`never` } ],
    "react/jsx-wrap-multilines": [ `error` ],
    "react/no-children-prop": [ `off` ],

    // "indent": [ `error`, 2, { SwitchCase:1 } ],
    "linebreak-style": [ `off` ],
    // "quotes": [ `error`, `backtick` ],
    "semi": [ `error`, `never` ],
    "object-curly-spacing": [ `error`, `always` ],
    "prefer-template": [ `off` ],
    "space-before-function-paren": [ `error`, `never` ],
    "space-before-blocks": [ `error`, `always` ],
    "func-call-spacing": [ `error`, `never` ],
    // "implicit-arrow-linebreak": [ `error`, `beside` ],
    "key-spacing": [ `error`, { singleLine:{ afterColon:false }, multiLine:{ mode:`minimum` } } ],
    "array-bracket-spacing": [ `error`, `always` ],
    "array-bracket-newline": [ `error`, { multiline:true } ],
    "block-spacing": [ `error` ],
    "space-unary-ops": [ `error`, { words:true, nonwords:false } ],
    "spaced-comment": [ `error`, `always`, { block:{ balanced:true, exceptions:[ `\\` ] }, line:{ markers:[ `/` ] } } ],
    "comma-dangle": [ `error`, `always-multiline` ],
    "eol-last": [ `error`, `always` ],
    "computed-property-spacing": [ `error`, `always`, { enforceForClassMembers:false } ],
    "arrow-spacing": [ `error`, { before:true, after:true } ],
    "template-tag-spacing": [ `error`, `never` ],
    "arrow-parens": [ `error`, `as-needed` ],
    "keyword-spacing": [ `error`, { before:true, after:true } ],
    "comma-spacing": [ `error`, { before:false, after:true } ],
    "space-infix-ops": [ `error` ],
    "import/order": [ `error`, { alphabetize:{ order:`desc` }, groups:[ `builtin`, `external`, `internal`, `parent`, `index`, `sibling`, `object`, `type` ] } ],
    "no-unused-vars": [ `off` ],
    "no-redeclare": [ `off` ],
    "no-constant-condition": [ `off` ],
    "no-return-await": [ `error` ],
    "no-whitespace-before-property": [ `error` ],
    "no-compare-neg-zero": [ `off` ],
    "no-unreachable": [ `off` ],
    "no-async-promise-executor": [ `off` ],
    "no-fallthrough": [ `off` ],
  },
}

export type RuleName = keyof typeof rules;
export declare const rules: {
    "space-in-arrow-functions-parens": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-arrow-functions-parens.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    "space-in-functions-parens": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-functions-parens.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    "space-in-calls": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-calls.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    "space-in-constructors": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-constructors.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    "space-in-loops-and-ifs": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-loops-and-ifs.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    "double-spaces-in-for": import("@typescript-eslint/utils/ts-eslint").RuleModule<"missingSpaceAfterFirstSemi" | "missingSpaceAfterSecondSemi", import("./rules/double-spaces-in-for.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    "space-around-jsx-children": import("@typescript-eslint/utils/ts-eslint").RuleModule<"missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-around-jsx-children.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
};
declare const _default: {
    rules: {
        "space-in-arrow-functions-parens": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-arrow-functions-parens.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        "space-in-functions-parens": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-functions-parens.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        "space-in-calls": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-calls.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        "space-in-constructors": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-constructors.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        "space-in-loops-and-ifs": import("@typescript-eslint/utils/ts-eslint").RuleModule<"undesirableSpaceInParens" | "missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-in-loops-and-ifs.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        "double-spaces-in-for": import("@typescript-eslint/utils/ts-eslint").RuleModule<"missingSpaceAfterFirstSemi" | "missingSpaceAfterSecondSemi", import("./rules/double-spaces-in-for.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
        "space-around-jsx-children": import("@typescript-eslint/utils/ts-eslint").RuleModule<"missingSpaceStart" | "missingSpaceEnd" | "undesirableSpaceStart" | "undesirableSpaceEnd", import("./rules/space-around-jsx-children.js").Options, unknown, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
    };
};
export default _default;
